%{
#include <cstdio>
#include <cstring>
#include <vector>

#include "application/structures.h"
#include "core/hybridAutomata/hybridAutomata.h"

extern int yylex();
extern int yyerror(char *);

// The mode dynamics to be created
Dynamics D;
hybrid_automata ha; // gives access to index to id map.
std::vector<double> coeff;
std::vector<double> u_coeff; // stores the coeff of inputs.
double constant = 0;
%}

%union{ char* token_str; double const_val;}
%token VAR UVAR CONST PLUS MINUS MULT EQ LEQ GEQ
%type <token_str> VAR UVAR
%type <const_val> CONST
%start S
 
%%

S : VAR EQ Expr						{
										
										std::string var=$1;
										int lhs_id = ha.get_index(var);
										unsigned int n = ha.map_size();
										//printf("ha map size: %d\n",n);
										//printf("lhs_id: %d\n",lhs_id);
										
										if(!coeff.empty()){
											for(unsigned int j=0;j<n;j++)
												D.MatrixA(lhs_id,j)+=coeff[j];
											D.isEmptyMatrixA = false;
											coeff.clear();
										}
										if(!u_coeff.empty()){
											unsigned int m = ha.umap_size();
											for(unsigned int j=0;j<m;j++)
												D.MatrixB(lhs_id,j)+=u_coeff[j];
											D.isEmptyMatrixB = false;
											u_coeff.clear();
										}
										if(!D.isEmptyC)
											D.C[lhs_id] = constant;
										
										constant = 0;
										return 0;
									}
	;

Expr : Expr PLUS Expr  	{;}
		 | VAR					  	{
										std::string var = $1;
										int id = ha.get_index(var);
										if(coeff.empty()) 
											coeff.resize(ha.map_size(),0);
										coeff[id]=1;
									}
		 | MINUS VAR				{										
										std::string var = $2;
										int id = ha.get_index(var);
										if(coeff.empty()) 
											coeff.resize(ha.map_size(),0);
										coeff[id]=-1;
									}
		 | UVAR						{
										//printf("uvar\n");
										std::string uvar = $1;
										int id = ha.get_u_index(uvar);
										if(u_coeff.empty())
											u_coeff.resize(ha.umap_size(),0);
										u_coeff[id] = 1;
									}
		 | MINUS UVAR				{
										std::string uvar = $2;
										int id = ha.get_u_index(uvar);
										if(u_coeff.empty()) 
											u_coeff.resize(ha.umap_size(),0);
										u_coeff[id]=-1;
									}
		 | CONST 					{
										constant += $1; 
										D.isEmptyC = false;
										D.C.resize(ha.map_size());
									}
		 | CONST MULT UVAR			{
										std::string uvar = $3;
										int id = ha.get_u_index(uvar);
										double c = $1;
										if(u_coeff.empty())
											u_coeff.resize(ha.umap_size(),0);
										u_coeff[id] = c;
									}
		 | UVAR MULT CONST			{
										std::string uvar = $1;
										int id = ha.get_u_index(uvar);
										double c = $3;
										if(u_coeff.empty()) 
											u_coeff.resize(ha.umap_size(),0);						
										u_coeff[id] = c;
									}
		 | CONST MULT VAR			{
										std::string var = $3;
										int id = ha.get_index(var);
										double c = $1;
										if(coeff.empty()) 
											coeff.resize(ha.map_size(),0);						
										coeff[id] = c; 	
									}
		 | VAR MULT CONST			{
										std::string var = $1;
										int id = ha.get_index(var);
										double c = $3;
										if(coeff.empty()) 
											coeff.resize(ha.map_size(),0);						
										coeff[id] = c;	
									}
		 | CONST VAR				{
										std::string var = $2;
										int id = ha.get_index(var);
										double c = $1;
										if(coeff.empty()) 
											coeff.resize(ha.map_size(),0);						
										coeff[id] = c; 								
									}
		 | CONST UVAR				{
										std::string uvar = $2;
										int id = ha.get_u_index(uvar);
										double c = $1;
										if(u_coeff.empty()) 
											u_coeff.resize(ha.umap_size(),0);						
										u_coeff[id] = c; 								
									}
		 ;
%%

void flow_parser(Dynamics& Dyn)
{
	D = Dyn;
	coeff.clear();
	u_coeff.clear();
	yyparse();
	Dyn = D;
}
int yyerror(char *s)
{
	fprintf(stderr,"Flow specification: %s\n", s);
	return 0;
}
